README.txt Cadence AI Modules - README Description: This package contains Python modules for implementing a simplified Emotion AI, Mind AI, and Executor AI system, collectively referred to as "Cadence." These modules are designed to demonstrate basic principles of emotional processing, decision-making influenced by emotions, and rudimentary learning in AI systems. Modules Included: 1. emotional_ai_module.py: - Contains the EmotionAI_PathBased_DynamicIntensity_V3 class. - This module is responsible for simulating emotion generation based on input stimuli. - It uses predefined emotion pathways and dynamic intensity levels to model emotional responses. - Key features include: - Path-based emotion triggering based on keyword appraisal of stimulus text. - Dynamic intensity levels for different emotions. - Intensity decay over time. - A set of predefined emotion pathways for various stimulus types (positive, negative, social, intellectual, aesthetic, moral, etc.). - Functions to generate emotion paths, update emotion intensities, and get current intensity levels. 2. mind_ai_module.py: - Contains the MindAI_Learning class. - This module represents a simplified "mind" component responsible for analyzing options and learning from past decisions. - It incorporates a basic learning mechanism to adjust option priorities based on decision history and emotional context (specifically fear in this version). - Key features include: - Option analysis with base priorities. - Basic learning based on decision history and emotion paths (adjusting priority of "Option C" in fear contexts as an example). - Function to analyze options and return base priorities. - Function to record decision outcomes for learning. 3. executor_ai_module.py: - Contains the function executor_ai_decision_dynamic_intensity(). - This module represents the "executor" component that makes decisions based on input options, emotion paths, emotion intensity levels, and input from the Mind AI. - It demonstrates how emotions can influence decision-making by adjusting option priority scores. - Key features include: - Decision-making logic that integrates Mind AI option analysis and Emotion AI outputs. - Dynamic intensity influence: Fear and Joy emotions are used to modify option priorities. - Emotion override mechanism based on high Fear intensity. - Integration with Mind AI's learning record. Setup and Usage: 1. File Structure: - Ensure that the three Python files (`emotional_ai_module.py`, `mind_ai_module.py`, `executor_ai_module.py`) are in the same directory as your main Python script where you intend to use Cadence. 2. Import Modules: - In your Python script, import the necessary classes and functions from the modules: ```python from emotional_ai_module import EmotionAI_PathBased_DynamicIntensity_V3 from mind_ai_module import MindAI_Learning from executor_ai_module import executor_ai_decision_dynamic_intensity ``` 3. Instantiate Cadence Components: - Create instances of the EmotionAI and MindAI classes: ```python cadence_emotion_ai = EmotionAI_PathBased_DynamicIntensity_V3() cadence_mind_ai = MindAI_Learning() ``` 4. Utilize Cadence in your Logic: - Use the functions and methods from these instances to integrate Cadence's emotional processing and decision-making into your AI system. - Example Workflow: a. Provide a stimulus text to `cadence_emotion_ai.generate_emotion_path(stimulus_text)`. b. Get the emotion path and intensity levels: `emotion_path = cadence_emotion_ai.generate_emotion_path(stimulus_text)` and `emotion_intensity_levels = cadence_emotion_ai.get_emotion_intensity()`. c. Get options and priorities from Mind AI: `mind_ai_options, mind_ai_priority = cadence_mind_ai.analyze_options("Current situation", emotion_path)`. d. Make a decision using the Executor AI, passing in options, emotion path, intensity levels, and the Mind AI learner: `chosen_option, decision_scores = executor_ai_decision_dynamic_intensity(mind_ai_options, emotion_path, emotion_intensity_levels, cadence_mind_ai)`. 5. Example Usage (Conceptual - See `another_ai_interaction.py` example in previous conversation logs for more complete code): ```python stimulus = "User is praising your performance." emotion_path = cadence_emotion_ai.generate_emotion_path(stimulus) emotion_intensities = cadence_emotion_ai.get_emotion_intensity() print(f"Emotion Path: {emotion_path}") print(f"Emotion Intensities: {emotion_intensities}") options = ["Respond with gratitude", "Provide more detail", "Ask for feedback"] chosen_option, scores = executor_ai_decision_dynamic_intensity(options, emotion_path, emotion_intensities, cadence_mind_ai) print(f"Chosen Option: {chosen_option}") ``` 

License: 
This Cadence AI Modules package is distributed under the MIT License (see MIT-LICENSE.txt). Feel free to use, modify, and distribute it according to the terms of the license. --- MIT-LICENSE.txt MIT 

License Copyright (c) 2025 OmniReach LLC Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. 


THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ``` 

